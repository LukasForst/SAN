ttest <- function(x1, x2) {
n <- length(x1)
s_p <- sqrt((sd(x1)^2 + sd(x2)^2) / 2)
t <- (mean(x1) - mean(x2)) / (s_p * sqrt(2 / n))
cbind(t, dt(t, 2*n - 2))
}
ttest(x,y)
ttest(x,y)
ttest(x,y)
ttest(x,y)
ttest <- function(x1, x2) {
n <- length(x1)
s_p <- sqrt((sd(x1)^2 + sd(x2)^2) / 2)
t <- (mean(x1) - mean(x2)) / (s_p * sqrt(2 / n))
res <- cbind(t, dt(t, 2*n - 2))
res.names <- c("t", "p-value")
}
ttest <- function(x1, x2) {
ttest <- function(x1, x2) {
n <- length(x1)
s_p <- sqrt((sd(x1)^2 + sd(x2)^2) / 2)
t <- (mean(x1) - mean(x2)) / (s_p * sqrt(2 / n))
res <- cbind(t, dt(t, 2*n - 2))
res.names <- c("t", "p-value")
}
a <- cbind(c(1,2,3))
a.names <- c("a", "b", "c")
a
a
a.names
ttest <- function(x1, x2) {
n <- length(x1)
s_p <- sqrt((sd(x1)^2 + sd(x2)^2) / 2)
t <- (mean(x1) - mean(x2)) / (s_p * sqrt(2 / n))
res <- cbind(t, dt(t, 2*n - 2))
names(res) <- c("t", "p-value")
res
}
res(x,y)
cbind(x,y)
rnorm(10)
ttest <- function(x1, x2) {
n <- length(x1)
s_p <- sqrt((sd(x1)^2 + sd(x2)^2) / 2)
t <- (mean(x1) - mean(x2)) / (s_p * sqrt(2 / n))
res <- cbind(t, dt(t, 2*n - 2))
names(res) <- c("t", "p-value")
res
}
x <- rnorm(100)
y <- rnorm(100)
ttest(x,y)
ttest <- function(x1, x2) {
n <- length(x1)
s_p <- sqrt((sd(x1)^2 + sd(x2)^2) / 2)
t <- (mean(x1) - mean(x2)) / (s_p * sqrt(2 / n))
data.frame("t" = t, "p" = dt(t, 2*n - 2))
}
ttest(x,y)
hist(x1)
hist(x)
(1:10)
rand(100)
rnd(100)
a <- c()
c(1, a)
c(2, c(1, a))
x <- c()
n <- 100
for (idx in 1:n) {
r1 <- rnorm(n)
r2 <- rnorm(n)
x <- c(x1, ttest(r1, r2))
}
for (idx in 1:n) {
r1 <- rnorm(n)
r2 <- rnorm(n)
x <- c(x, ttest(r1, r2))
}
hist(x)
head(x)
for (idx in 1:n) {
r1 <- rnorm(n)
r2 <- rnorm(n)
x <- c(x, ttest(r1, r2)$t)
}
hist(x)
head(x)
x <- c()
n <- 100
for (idx in 1:n) {
r1 <- rnorm(n)
r2 <- rnorm(n)
x <- c(x, ttest(r1, r2)$t)
}
hist(x)
sample <- function(n) {
x <- c()
n <- 10000
for (idx in 1:n) {
r1 <- rnorm(n)
r2 <- rnorm(n)
x <- c(x, ttest(r1, r2)$t)
}
}
hist(sample(100000))
sampled <- sample(1000)
head(sampled)
sample <- function(n) {
x <- c()
for (idx in 1:n) {
r1 <- rnorm(n)
r2 <- rnorm(n)
x <- c(x, ttest(r1, r2)$t)
}
x
}
sampled <- sample(100)
hist(sampled)
length(sampled)
help(rnorm)
sample <- function(n, x1, x2) {
x <- c()
for (idx in 1:n) {
r1 <- rnorm(n, mean = x1$mean, sd = x1$sd)
r2 <- rnorm(n, mean = x2$mean, sd = x2$sd)
x <- c(x, ttest(r1, r2)$t)
}
x
}
x1 <- data.frame("mean" = 0, sd = 1)
x2 <- data.frame("mean" = 5, sd = 1)
sampled <- sample(10000, x1, x2)
sampled <- sample(10000, x1, x2)
sampled <- sample(100, x1, x2)
hist(sampled)
h0 <- sample(100, 0, 0)
sample <- function(n, m1, m2) {
x <- c()
for (idx in 1:n) {
r1 <- rnorm(n, mean = m1)
r2 <- rnorm(n, mean = m2)
x <- c(x, ttest(r1, r2)$t)
}
x
}
h0 <- sample(100, 0, 0)
h1 <- sample(100, 3, 1)
h0 <- data.frame("sample" = sample(100, 0, 0))
h0$hypothesis <- "H_0"
h1 <- data.frame("sample" = sample(100, 3, 0))
h1$hypothesis <- "H_1"
hs <- rbind(h0, h1)
ggplot(hs, aes(sample, fill = hypothesis)) + geom_density(alpha = 0.2)
library(ggplot2)
library(ggplot)
library(ggplot2)
ggplot(hs, aes(sample, fill = hypothesis)) + geom_density(alpha = 0.2)
h1 <- data.frame("sample" = sample(100, 1.2, 0))
h1$hypothesis <- "H_1"
hs <- rbind(h0, h1)
ggplot(hs, aes(sample, fill = hypothesis)) + geom_density(alpha = 0.2)
t.test(x, y)
t.test(x, y)$t
t.test(x, y)$statistic
sample <- function(n, m1, m2) {
x <- c()
for (idx in 1:n) {
r1 <- rnorm(n, mean = m1)
r2 <- rnorm(n, mean = m2)
x <- c(x, t.test(r1, r2)$statistic)
}
x
}
h0 <- data.frame("sample" = sample(100, 0, 0))
h0$hypothesis <- "H_0"
h1 <- data.frame("sample" = sample(100, 1.2, 0))
h1$hypothesis <- "H_1"
hs <- rbind(h0, h1)
ggplot(hs, aes(sample, fill = hypothesis)) + geom_density(alpha = 0.2)
ggplot(hs, aes(sample, fill = hypothesis))
ggplot(hs, aes(sample, fill = hypothesis)) + geom_density(alpha = 0.9)
ggplot(hs, aes(sample, fill = hypothesis)) + geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity')
h0 <- data.frame("sample" = sample(100, 0, 0))
h0$hypothesis <- "H_0"
h1 <- data.frame("sample" = sample(100, 0, 0))
h1$hypothesis <- "H_1"
hs <- rbind(h0, h1)
ggplot(hs, aes(sample, fill = hypothesis)) + geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity')
h0 <- data.frame("sample" = sample(1000, 0, 0))
h0$hypothesis <- "H_0"
h1 <- data.frame("sample" = sample(1000, 1, 0))
h1$hypothesis <- "H_1"
hs <- rbind(h0, h1)
ggplot(hs, aes(sample, fill = hypothesis)) + geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity')
ggplot(hs, aes(sample, fill = hypothesis))
ggplot(hs, aes(sample, fill = hypothesis))  + geom_histogram(alpha = 0.9, aes(y = ..density..), position = 'identity')
sample
h0$sample
h0 <- data.frame("sample" = sample(1000, 0, 0))
h0$hypothesis <- "H_0"
h1 <- data.frame("sample" = sample(1000, 0, 0))
h1 <- data.frame("sample" = sample(1000, 0, 0))
h1$hypothesis <- "H_1"
hs <- rbind(h0, h1)
ggplot(hs, aes(sample, fill = hypothesis))  + geom_histogram(alpha = 0.9, aes(y = ..density..), position = 'identity')
h1 <- data.frame("sample" = sample(1000, 0.1, 0))
h1 <- data.frame("sample" = sample(1000, 0.1, 0))
h1$hypothesis <- "H_1"
h1$hypothesis <- "H_1"
hs <- rbind(h0, h1)
ggplot(hs, aes(sample, fill = hypothesis))  + geom_histogram(alpha = 0.9, aes(y = ..density..), position = 'identity')
h1 <- data.frame("sample" = sample(1000, 0.2, 0))
h1 <- data.frame("sample" = sample(1000, 0.2, 0))
h1$hypothesis <- "H_1"
ggplot(hs, aes(sample, fill = hypothesis))  + geom_histogram(alpha = 0.9, aes(y = ..density..), position = 'identity')
ggplot(hs, aes(sample, fill = hypothesis))
+ geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
plot <- ggplot(hs, aes(sample, fill = hypothesis))
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
min(10, 2)
min(c(10, 2)
)
tdist <- data.frame("sample" = seq(min(min(h1$sample), min(h0$sample)), max( max(h0$sample), max(h1$sample))), 1)
hs <- rbind(h0, h1)
tdist <- data.frame("sample" = seq(min(min(h1$sample), min(h0$sample)), max( max(h0$sample), max(h1$sample))), 1)
tdist$hypothesis <- "T dist"
hs <- rbind(h0, h1)
plot <- ggplot(hs, aes(sample, fill = hypothesis))
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
plot + geom_hline
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
tdist <- data.frame("x" = seq(min(min(h1$sample), min(h0$sample)), max( max(h0$sample), max(h1$sample)), 1))
tdist$y <- dt(tdist$x, 2*n - 2)
tdist$name <- "T dist"
hs <- rbind(h0, h1)
plot <- ggplot(hs, aes(sample, fill = hypothesis))
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
plot + geom_abline(data = tdist)
plot + geom_abline(aes(x = x, y = y), tdist)
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
plot <- ggplot(hs, aes(sample, fill = hypothesis))
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
plot + geom_abline(aes(x = x, y = y), tdist)
plot + geom_line(aes(x = x, y = y), tdist)
plot <- ggplot(hs, aes(sample, fill = hypothesis))
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
plot + geom_line(color = "blue")
plot <- ggplot(hs, aes(sample, fill = hypothesis))
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
plot + geom_line(x=tdist$x, y=tdist$y, color = "blue")
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
plot + geom_line(tdist, aes(x='x', y='y'))
plot <- ggplot(hs, aes(sample, fill = hypothesis))
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
plot + stat_function(fun = dt, args = list(df = 2*n - 2))
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
hs <- rbind(h0)
plot <- ggplot(hs, aes(sample, fill = hypothesis))
plot + geom_histogram(alpha = 0.8, aes(y = ..density..), position = 'identity')
plot + stat_function(fun = dt, args = list(df = 2*n - 2))
wine <- read.csv("wine.csv")
names(wine) <- c("Type", "Alcohol", "Malic acid", "Ash", "Alcalinity of ash", "Magnesium", "Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
wine$Type <- factor(wine$Type)
wine <- data.frame(wine)
View(wine)
View(wine)
help(sweep)
splittedData <- split(mydata, labels)
mydata
data <- split(wine, wine$Type)
head(data)
subtractedGroupMeansOfEachRow <- lapply(data, function(group){ sweep(group, 2, colMeans(group), '-')})
datag <- function() {
wines <- read.csv("wine.csv", header = F)
names(wines) <- c("Class", "Alcohol", "Malic_acid", "Ash", "AshAlcalinity", "Magnesium", "TotalPhenols", "Flavanoids", "NonFlavanoidPhenols", "Proanthocyanins", "ColorIntensity", "Hue", "OD280_OD315", "Proline")
wines$Class <- as.factor(wines$Class)
labels <- wines$Class
wines2 <- wines[,-1]
wines2
}
data <- split(datag(), wine$Type)
subtractedGroupMeansOfEachRow <- lapply(data, function(group){ sweep(group, 2, colMeans(group), '-')})
head(subtractedGroupMeansOfEachRow)
data
head(data)
lapply(data, function(x) { x - colMeans(group) })
lapply(data, function(x) { x - colMeans(x) })
a <- lapply(data, function(x) { x - colMeans(x) })
sweep(a, 2)
sweep(a, 2, function(x) {x})
sweep(a, 2
0
lapply(data, function(group){ sweep(group, 2, colMeans(group), '-')})
data <- split(datag(), wine$Type)
minus_group_mean <- lapply(data, function(group){sweep(group, 2, colMeans(group), '-')})
groupMatrices <- lapply(minus_group_mean, function(group) {rowSums(apply(group,1,function(row){row%*%t(row)}))})
# sum the group matrices to create one matrix
withinScatterMatrixAsVector <- Reduce('+', groupMatrices)
withinMatrix <- matrix(withinScatterMatrixAsVector, nrow = sqrt(length(withinScatterMatrixAsVector)))
# inner apply computes the $(x - \overline{\mu_c})(x - \overline{\mu_c})^T$ matrices, but returns them as vector
# the rowSums then sums the matrices to create one matrix for each group
groupRows <- lapply(minus_group_mean, function(group) { apply(group,1,function(row){row%*%t(row)}) })
groupMatrices <- lapply(groupRows, rowSums)
minusGroupMeans <- lapply(data, function(group){sweep(group, 2, colMeans(group), '-')})
groupRows <- lapply(minusGroupMeans, function(group) { apply(group, 1, function(row){ row%*%t(row) }) })
groupMatrices <- lapply(groupRows, rowSums)
# sum the group matrices to create one matrix
withinScatterMatrixAsVector <- Reduce('+', groupMatrices)
withinMatrix <- matrix(withinScatterMatrixAsVector, nrow = sqrt(length(withinScatterMatrixAsVector)))
data
data[1]
length(data[i])
length(data[1])
length(data$1)
length(data$`2`)
length(data$`1`)
length(data$`2`)
length(data$`4`)
i <- 1
group <- data[i]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
group <- data[i][1]
head(group)
group <- data[i]$1
head(data$1)
length(data$1)
length(data$`1`))
length(data$`1`)
length(data$`2`)
group <- data`i`
class(data)
data[1]
lenght(data[1])
length(data[1])
length(data)
length(data[1])
length(data[2])
length(data[3])
length(data[4])
length(data[[1]])
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
finalMatrix <- finalMatrix + groupRowsSums
finalMatrix <- c()
M
View(groupRows)
minusGroupMeans
groupRows <- lapply(minusGroupMeans, function(group) { apply(group, 1, function(row){ row%*%t(row) }) })
data <- split(datag(), wine$Type)
datag <- function() {
wines <- read.csv("wine.csv", header = F)
names(wines) <- c("Class", "Alcohol", "Malic_acid", "Ash", "AshAlcalinity", "Magnesium", "TotalPhenols", "Flavanoids", "NonFlavanoidPhenols", "Proanthocyanins", "ColorIntensity", "Hue", "OD280_OD315", "Proline")
wines$Class <- as.factor(wines$Class)
labels <- wines$Class
wines2 <- wines[,-1]
wines2
}
data <- split(datag(), wine$Type)
datag <- function() {
wines <- read.csv("wine.csv", header = F)
names(wines) <- c("Class", "Alcohol", "Malic_acid", "Ash", "AshAlcalinity", "Magnesium", "TotalPhenols", "Flavanoids", "NonFlavanoidPhenols", "Proanthocyanins", "ColorIntensity", "Hue", "OD280_OD315", "Proline")
wines$Class <- as.factor(wines$Class)
labels <- wines$Class
wines2 <- wines[,-1]
wines2
}
wines <- read.csv("wine.csv", header = F)
datag <- function() {
wines <- read.csv("wine.csv", header = F)
names(wines) <- c("Class", "Alcohol", "Malic_acid", "Ash", "AshAlcalinity", "Magnesium", "TotalPhenols", "Flavanoids", "NonFlavanoidPhenols", "Proanthocyanins", "ColorIntensity", "Hue", "OD280_OD315", "Proline")
wines$Class <- as.factor(wines$Class)
labels <- wines$Class
wines2 <- wines[,-1]
wines2
}
data <- split(datag(), wine$Type)
datag()
wine <- read.csv("wine.csv")
names(wine) <- c("Type", "Alcohol", "Malic acid", "Ash", "Alcalinity of ash", "Magnesium", "Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
wine$Type <- factor(wine$Type)
data <- split(datag(), wine$Type)
finalMatrix <- c()
i <- 1
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
finalMatrix <- finalMatrix + groupRowsSums
finalMatrix <- finalMatrix + groupRowsSums
finalMatrix
groupRowsSums
vector(13)
vector(mode="numeric", length=10)
data[[1]][1])
data[[1]][1]
data[[1]]
i <- 1
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
length(groupRowsSums)
finalMatrix <- vector(mode="numeric", length=169
for(i in 1:n) {
finalMatrix <- vector(mode="numeric", length=169)
i <- 1
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
finalMatrix <- finalMatrix + groupRowsSums
i <- 2
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
finalMatrix <- finalMatrix + groupRowsSums
i <- 3
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
finalMatrix <- finalMatrix + groupRowsSums
withinMatrix <- matrix(finalMatrix, nrow = sqrt(length(withinScatterMatrixAsVector)))
withinMatrix <- matrix(finalMatrix, nrow = sqrt(length(finalMatrix)))
w <- datag()
View(data)
mydata <- read.csv("wine.csv", header = FALSE)
labels <- mydata[,1]
#number of classes
n <-length(levels(labels))
# 1) split the data w.r.t. given factors
splittedData <- split(mydata, labels)
splittedData
splittedData$`1`
lenght(splittedData$`1`)
length(splittedData$`1`)
length(splittedData$`1`) - 1
#number of classes
n <-length(levels(labels))
# 1) split the data w.r.t. given factors
splittedData <- split(mydata, labels)
splittedData$`1`
length(splittedData$`1`)
length(splittedData$`2`)
length(splittedData$`3`)
data <- splittedData
size <- length(data[[1]]) - 1
rowsVector <- vector(mode="numeric", length=169)
length(rowsVector)
rowsVector <- vector(mode="numeric", length=169)
for(i in 1:n) {
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
rowsVector <- rowsVector + groupRowsSums
}
data <- splittedData
n <- 3
size <- length(data[[1]]) - 1
rowsVector <- vector(mode="numeric", length=169)
for(i in 1:n) {
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
rowsVector <- rowsVector + groupRowsSums
}
withinMatrix <- matrix(rowsVector, nrow = size)
data <- splittedData
n <- 3
size <- length(data[[1]]) - 1
rowsVector <- vector(mode="numeric", length=size * size)
for(i in 1:n) {
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
rowsVector <- rowsVector + groupRowsSums
}
withinMatrix <- matrix(rowsVector, nrow = size)
i <- 1
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
i <- 2
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
i <- 2
i <- 3
group <- data[[i]]
minusGroupMeans <- sweep(group, 2, colMeans(group), '-')
groupRowsSums <- rowSums(apply(minusGroupMeans, 1, function(row){ row%*%t(row) }))
rowsVector <- rowsVector + groupRowsSums
mydata <- read.csv("wine.csv", header = FALSE)
labels <- mydata[,1]
labels <- as.factor(labels)
mydata <- mydata[,-1]
h
#number of classes
n <-length(levels(labels))
# 1) split the data w.r.t. given factors
splittedData <- split(mydata, labels)
data <- mydata
n <- levels(labels)
#number of classes
n <-length(levels(labels))
length(data)
mydata <- read.csv("wine.csv", header = FALSE)
labels <- mydata[,1]
labels <- as.factor(labels)
mydata <- mydata[,-1]
#compute LDA and return corresponding eigenvectors
eigenLDA <- LDA(mydata, labels)
#compute LDA and return corresponding eigenvectors
eigenLDA <- LDA(mydata, labels)
